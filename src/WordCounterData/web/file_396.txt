5066441 <h> You are here <h> How to create a patch <p> If you have made some changes to the code that you would like to share with the community, particularly if you want to send them to one of the core developers for possible inclusion in Moodle Core, it is very helpful if you can provide them as a patch file. Sometimes also called a diff file. <p> This page explains how you can make a patch file. Patch is a standard format, and there are many options for how to create one. Pick the one that is easiest for you. One of the most critical aspects of patch usage is identifying for your audience the location for the patch file for application relative to the -p flag! When you create patches note your location and provide that when you share patches. <h> Creating a patch using diff <p> diff is the a linux command line program, and is where patch files originated. It requires that you have two copies of the code, one with your changes, and one without. Suppose these two copies @ @ @ @ @ @ @ @ @ @ ' which are subdirectories of the current folder. Then to create the patch, type : <p> diff -Naur standardmoodle mymoodle &gt; patch.txt <h> Creating a patch using CVS( command line) <p> It is easier if you are using CVS to manage your development, because you do n't need to keep the copy of ' standardmoodle '. CVS takes care of that for you. In your workspace( sandbox) type : <p> cvs diff -uN &gt; patch.txt <p> If you have unversioned files to include in your patch, you will notice that the above command simply adds the file 's name to the top of your patch, prefixed with a question mark. This is because your new file is not tagged for adding to the repository. Just do <p> cvs add newfile <p> Then <p> cvs diff -uNa &gt; patch.txt <p> This should add the correct code to the patch, so that someone applying the patch to their working copy will have a new file created at the right place( hopefully!). <p> If your @ @ @ @ @ @ @ @ @ @ white space changes in many files, you might want to add -Bbw to the diff call. Make sure these changes are really not significant( like adding or removing a space at the end of a line - editors like Eclipse sometimes do this automatically). This can make a patch a lot smaller, and thus easier to review. The complete call would then be <p> cvs diff -uNawbB &gt; patch.txt <h> Creating a patch using Tortoise CVS <p> Tortoise CVS is a Windows GUI front end for CVS. To create a patch, right-click on a folder in CVS, and choose CVS -&gt; Make patch... from the context menu. <h> Creating a patch using Eclipse <h> Creating a patch using WinMerge <p> WinMerge is a nice windows GUI for comparing folders. In this sense it is like the original command-line ' diff ' program. You need a copy of ' standardmoodle ' and ' mymoodle '. Use File -&gt; Open... to open the two versions for comparison. This will give you a nice view of @ @ @ @ @ @ @ @ @ @ patch.... In the dialogue box, make sure you select Style : Unified in the Format box. <h> Creating a patch using Git <p> Creating a patch if you 're using Git for version control is similar to CVS, and similarly you do n't need an unchanged copy of moodle to diff against. The easiest way to create a patch for the last commit is <p> git show &gt; patch.txt <p> or if you want to create a patch between 2 specific commits you can use git diff <p> git diff commitid1 commitid2 &gt; patch.txt <p> There 's also a tool, format-patch, for formatting a patch to send as an e-mail. You can create patches for the last n revisions like this : <p> git format-patch - n <p> which will create the patch in the current directory. The 
